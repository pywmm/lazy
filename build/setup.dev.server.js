// require('babel-polyfill');

require('babel-polyfill');

const path = require('path');
const webpack = require('webpack');
// const MFS = require('memory-fs');
const webpackExpressDevMiddleware = require('webpack-dev-middleware');
const { hotMiddleware: webpackHotMiddleware } = require('koa-webpack-middleware');

module.exports = function setupDevServer(app, name, cb) {
  let bundle;
  let clientManifest;
  let resolve;
  const readyPromise = new Promise((r) => { resolve = r; });
  const ready = (...args) => {
    resolve();
    cb(...args);
  };

  const clientConfig = require('./webpack.base.config'); // eslint-disable-line global-require
  // const serverConfig = require('./webpack.server.config')(name); // eslint-disable-line global-require

  // modify client config to work with hot middleware
  clientConfig.entry[name] = ['webpack-hot-middleware/client?overlay=false', clientConfig.entry[name]];
  clientConfig.output.filename = '[name].js';
  clientConfig.plugins.push(new webpack.HotModuleReplacementPlugin());
  clientConfig.plugins.push(new webpack.NoEmitOnErrorsPlugin());

  // dev middleware
  const clientCompiler = webpack(clientConfig);
  const devMiddleware = webpackExpressDevMiddleware(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true,
  });

  app.use(async (ctx, next) => {
    await devMiddleware(ctx.req, {
      end: (content) => {
        ctx.body = content;
      },
      setHeader: (headerName, value) => {
        ctx.headers[headerName] = value;
      },
    }, next);
  });

  clientCompiler.plugin('done', () => {
    const fs = devMiddleware.fileSystem;
    const readFile = file => fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8');
    clientManifest = JSON.parse(readFile('vue-ssr-client-manifest.json'));
    if (bundle) {
      ready(bundle, {
        clientManifest,
      });
    }
  });

  // hot middleware
  app.use(webpackHotMiddleware(clientCompiler));

  // watch and update server renderer
  // const serverCompiler = webpack(serverConfig);
  // const mfs = new MFS();
  // serverCompiler.outputFileSystem = mfs;
  // serverCompiler.watch({}, (err, stats) => {
  //   if (err) throw err;
  //   stats = stats.toJson(); // eslint-disable-line no-param-reassign
  //   stats.errors.forEach(error => console.error(error)); // eslint-disable-line no-console
  //   stats.warnings.forEach(error => console.warn(error)); // eslint-disable-line no-console

  //   // read bundle generated by vue-ssr-webpack-plugin
  //   const bundlePath = path.join(serverConfig.output.path, 'vue-ssr-server-bundle.json');
  //   bundle = JSON.parse(mfs.readFileSync(bundlePath, 'utf-8'));
  //   if (clientManifest) {
  //     ready(bundle, {
  //       clientManifest,
  //     });
  //   }
  // });

  return readyPromise;
};
